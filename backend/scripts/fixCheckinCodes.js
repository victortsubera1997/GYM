import mongoose from 'mongoose';
import dotenv from 'dotenv';
import crypto from 'crypto';
import path from 'path';
import { fileURLToPath } from 'url';
import User from '../models/User.model.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
dotenv.config({ path: path.resolve(__dirname, '../.env') });

async function fixCheckinCodes() {
  try {
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ MongoDB connected');

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ checkinCode
    const usersWithoutCode = await User.find({
      $or: [{ checkinCode: null }, { checkinCode: '' }]
    });

    console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ QR: ${usersWithoutCode.length}`);

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–¥ –∫–æ–∂–Ω–æ–º—É
    for (const user of usersWithoutCode) {
      user.checkinCode = crypto.randomBytes(8).toString('hex'); // 16 —Å–∏–º–≤–æ–ª—ñ–≤
      await user.save();
      console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: ${user.name} (${user._id})`);
    }

    console.log('üéØ –£—Å—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ checkinCodes –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ.');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  }
}

fixCheckinCodes();
