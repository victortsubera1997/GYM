// backend/models/User.model.js
import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';
import crypto from 'crypto';

/**
 * –õ–æ–≥–∏ –≤–∞–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
 */
const weightEntrySchema = new mongoose.Schema(
  {
    date: { type: Date, default: () => new Date() },
    weightKg: { type: Number, required: true }, // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–≥ (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É –∫–ª—ñ—î–Ω—Ç—ñ, —è–∫—â–æ —Ç—Ä–µ–±–∞)
    note: { type: String, default: '' },
  },
  { _id: false }
);

/**
 * –ü–æ—Ç–æ—á–Ω—ñ –∞–Ω—Ç—Ä–æ–ø–æ–º–µ—Ç—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ (–≤—Å–µ —É —Å–º/–∫–≥)
 * ‚Äî –∑—Ä—É—á–Ω–æ —Ç—Ä–∏–º–∞—Ç–∏ ‚Äú–æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–Ω—ñ–º–æ–∫‚Äù, –∞ —ñ—Å—Ç–æ—Ä—ñ—é ‚Äî –æ–∫—Ä–µ–º–æ (weightLog)
 */
const bodyMetricsSchema = new mongoose.Schema(
  {
    heightCm: { type: Number, default: null },     // –∑—Ä—ñ—Å—Ç
    currentWeightKg: { type: Number, default: null }, // –ø–æ—Ç–æ—á–Ω–∞ –≤–∞–≥–∞ (–¥—É–±–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π weightLog –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É)
    goalWeightKg: { type: Number, default: null },  // —Ü—ñ–ª—å–æ–≤–∞ –≤–∞–≥–∞ (–æ–ø—Ü—ñ–π–Ω–æ)
    // –≤–∏–º—ñ—Ä–∏
    neckCm: { type: Number, default: null },
    chestCm: { type: Number, default: null },
    waistCm: { type: Number, default: null },
    hipsCm: { type: Number, default: null },
    bicepsCm: { type: Number, default: null },
    thighCm: { type: Number, default: null },
    calfCm: { type: Number, default: null },
    // –¥–æ–¥–∞—Ç–∫–æ–≤–æ
    birthday: { type: Date, default: null },        // —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ —Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–∫ (–æ–ø—Ü—ñ–π–Ω–æ)
    sex: { type: String, enum: ['male', 'female', 'other', null], default: null },
  },
  { _id: false }
);

/**
 * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
const settingsSchema = new mongoose.Schema(
  {
    privacy: {
      type: String,
      enum: ['public', 'friends', 'private'],
      default: 'private',
    },
    units: {
      // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î –≤ SI (–∫–≥/—Å–º), –∞–ª–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ —É –∫–ª—ñ—î–Ω—Ç—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      weight: { type: String, enum: ['kg', 'lb'], default: 'kg' },
      length: { type: String, enum: ['cm', 'in'], default: 'cm' },
    },
    leaderboardOptIn: { type: Boolean, default: true }, // —É—á–∞—Å—Ç—å —É —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ
    showGymLeaderboard: { type: Boolean, default: true }, // –ø–æ–∫–∞–∑ —É —Ä–µ–π—Ç–∏–Ω–≥—É –∑–∞–ª—É
  },
  { _id: false }
);

const userSchema = new mongoose.Schema(
  {
    // –±–∞–∑–æ–≤–µ
    name: { type: String, required: true },
    phone: { type: String, required: true, unique: true },
    email: { type: String, unique: true, sparse: true },
    password: { type: String, required: true },

    // –∞–±–æ–Ω–µ–º–µ–Ω—Ç
    membership: { type: mongoose.Schema.Types.ObjectId, ref: 'Membership', default: null },
    membershipStart: { type: Date, default: null },
    membershipEnd: { type: Date, default: null },

    // –∑–∞–ª–∏—à–æ–∫ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å (null ‚Äî –±–µ–∑–ª—ñ–º—ñ—Ç)
    visitsRemaining: { type: Number, default: null },

    // —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–ª—è QR/check-in
    checkinCode: { type: String, unique: true, sparse: true },

    role: { type: String, enum: ['admin', 'client'], default: 'client' },

    // üÜï –∞–Ω—Ç—Ä–æ–ø–æ–º–µ—Ç—Ä—ñ—è + —ñ—Å—Ç–æ—Ä—ñ—è –≤–∞–≥–∏
    bodyMetrics: { type: bodyMetricsSchema, default: () => ({}) },
    weightLog: { type: [weightEntrySchema], default: [] },

    // üÜï –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å
    settings: { type: settingsSchema, default: () => ({}) },
  },
  { timestamps: true }
);

// –ì–µ–Ω–µ—Ä—É—î–º–æ checkinCode –æ–¥–∏–Ω —Ä–∞–∑ (—è–∫—â–æ —â–µ –Ω–µ–º–∞—î)
userSchema.pre('save', function (next) {
  if (!this.checkinCode) {
    this.checkinCode = crypto.randomBytes(8).toString('hex'); // 16 —Å–∏–º–≤–æ–ª—ñ–≤
  }
  next();
});

// –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è (–ª–∏—à–µ —è–∫—â–æ –∑–º—ñ–Ω—é–≤–∞–≤—Å—è)
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();
  try {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
  } catch (err) {
    next(err);
  }
});

// –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
userSchema.methods.matchPassword = async function (enteredPassword) {
  return bcrypt.compare(enteredPassword, this.password);
};

/**
 * –•–µ–ª–ø–µ—Ä: –æ–Ω–æ–≤–∏—Ç–∏ currentWeightKg –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É –ª–æ–≥—ñ–≤ –≤–∞–≥–∏.
 * –í–∏–∫–ª–∏–∫–∞–π –ø—ñ—Å–ª—è –ø—É—à—É –≤ weightLog —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ.
 */
userSchema.methods.syncCurrentWeightFromLog = function () {
  if (!Array.isArray(this.weightLog) || this.weightLog.length === 0) return;
  const last = this.weightLog[this.weightLog.length - 1];
  if (last?.weightKg) {
    this.bodyMetrics.currentWeightKg = last.weightKg;
  }
};

const User = mongoose.model('User', userSchema);
export default User;